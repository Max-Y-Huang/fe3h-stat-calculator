{"version":3,"sources":["WindowWrapper.js","Main.js","ClassChangeInput.js","ClassChange.js","BaseStats.js","CharacterSelect.js","App.js","serviceWorker.js","index.js"],"names":["WindowWrapper","props","headerRef","React","createRef","headerButtonsRef","state","headerHeight","headerButtonsWidth","this","setState","current","clientHeight","characterId","characterName","className","ref","Segment","src","alt","Header","headerButtons","style","top","body","Component","Main","onReset","levelInputRef","value","finalLevel","formatClassChanges","classChanges","slice","character","baseLevel","characterBaseLevel","spliceLength","length","i","splice","push","level","class","getMonteCarloAverageStat","stat","n","percentile","dataList","getAverageStat","sort","a","b","Math","round","fixed","classes","val","characterBaseStats","max","characterGrowth","classGrowth","growthModifier","levelA","levelB","levelDifference","random","setFinalLevel","e","name","setPercentile","newPercentile","setPercentileIterations","newPercentileIterations","percentileIterations","renderStatDisplays","map","col","Grid","Column","key","cell","label","prevProps","prevStates","resetFlag","Button","color","icon","onClick","openCharacterSelectFunc","Icon","Label","attached","Input","type","onChange","fluid","defaultValue","labelPosition","Divider","openBaseStatsFunc","marginBottom","openClassChangeFunc","columns","setPercentileFunc","setPercentileIterationsFunc","StatDisplay","readOnly","PercentileInput","values","step","min","renderTrack","children","renderThumb","width","marginLeft","ClassChangeInput","getValues","ret","hasOwnProperty","setClassOptions","tempOptions","text","classOptions","modifyAttr","id","attr","newVal","tempClassChanges","defaultClass","defaultLevel","deleteClassChangeInputField","tempClassChangeFieldList","classChangeFieldList","addClassChangeInputField","crypto","update","Date","now","digest","renderClassChangeFields","identifier","options","modifyFunc","deleteFunc","ClassChangeField","changeClass","changeLevel","parseInt","delete","fixedWidthRef","fixedRefWidth","clientWidth","Dropdown","placeholder","search","selection","flexBasis","margin","ClassChange","onApply","classChangeRef","appliedFunc","BaseStats","setStatsToAverage","close","baseClass","baseStats","modifiedBaseStats","includeStatBoosts","tempBaseStats","forEach","getAverageBaseStat","setBaseLevel","setIncludeStatBoosts","checked","setBaseStatValue","setBaseStatValueFunc","includeStatBoostsLabel","Checkbox","toggle","setValue","inputRef","resetValue","CharacterSelect","renderCharacterItems","grid","indexCounter","characters","CharacterItem","Card","Image","wrapped","ui","Content","Description","App","reset","openClassChange","classChangeOpen","openBaseStats","baseStatsOpen","openCharacterSelect","characterSelectOpen","applyClassChanges","newClassChanges","applyBaseStats","newBaseLevel","newBaseStats","applyCharacterSelect","newCharacterId","sideBarOpen","Sidebar","Pushable","as","animation","visible","backgroundColor","Pusher","overflow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3903040d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\n\r\nimport './css/windowWrapper.css';\r\n\r\nclass WindowWrapper extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.headerRef = React.createRef();\r\n    this.headerButtonsRef = React.createRef();\r\n\r\n    this.state = {\r\n      headerHeight: 0,\r\n      headerButtonsWidth: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.setState({\r\n      headerHeight: this.headerRef.current.clientHeight\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    let characterId = this.props.characterId;\r\n    let characterName = this.props.characterName;\r\n    \r\n    return (\r\n      <div className='window-wrapper'>\r\n        <div ref={this.headerRef}>\r\n\r\n          <Segment className='header-segment'>\r\n            <div>\r\n              <img src={'images/characters/' + characterId + '.png'} alt='' />\r\n              <div><Header>{characterName}</Header></div>\r\n            </div>\r\n\r\n            <div>{this.props.headerButtons}</div>\r\n          </Segment>\r\n          \r\n        </div>\r\n        <div className='body-segment' style={{top: 'calc(' + this.state.headerHeight + 'px + 1em)'}}>\r\n          {this.props.body}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WindowWrapper;\r\n","import React from 'react';\r\nimport { Button, Icon, Grid, Input, Label, Segment, Divider } from 'semantic-ui-react';\r\nimport { Range } from 'react-range';\r\n\r\nimport WindowWrapper from './WindowWrapper';\r\n\r\nimport './css/main.css';\r\nimport './css/statGrid.css';\r\n\r\nimport classes from './data/classes.json';\r\n\r\nclass Main extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.levelInputRef = React.createRef();\r\n\r\n    this.state = {\r\n      finalLevel: 1,\r\n      percentile: 50,\r\n      percentileIterations: 100\r\n    }\r\n  }\r\n\r\n  onReset = () => {\r\n\r\n    // Reset final level.\r\n    this.levelInputRef.current.value = 1;\r\n    this.setState({\r\n      finalLevel: 1\r\n    });\r\n  }\r\n\r\n  formatClassChanges = () => {\r\n\r\n    let classChanges = this.props.classChanges.slice();\r\n    let character = this.props.character;\r\n    let baseLevel = this.props.characterBaseLevel;\r\n    let finalLevel = this.state.finalLevel;\r\n\r\n    // Remove class changes before base level.\r\n    let spliceLength = classChanges.length;\r\n    for (let i = 0; i < classChanges.length; i++) {\r\n      if (classChanges[i]['level'] >= baseLevel) {\r\n        spliceLength = i;\r\n        break;\r\n      }\r\n    }\r\n    classChanges.splice(0, spliceLength);\r\n    \r\n    // Remove class changes after final level.\r\n    for (let i = 0; i < classChanges.length; i++) {\r\n      if (classChanges[i]['level'] > finalLevel) {\r\n        classChanges.splice(i);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // A placeholder class change is added for the final level. It is for coding simplicity, and it gets skipped in calculations.\r\n    classChanges.push({\r\n      level: finalLevel,\r\n      class: null\r\n    });\r\n\r\n    // Add class change for initial class.\r\n    classChanges.splice(0, 0, {\r\n      level: baseLevel,\r\n      class: character['class']\r\n    });\r\n\r\n    return classChanges;\r\n  }\r\n\r\n  getMonteCarloAverageStat = (stat, n, percentile) => {\r\n\r\n    let dataList = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      dataList.push(this.getAverageStat(stat, false));\r\n    }\r\n\r\n    dataList.sort((a, b) => {\r\n      return a - b\r\n    });\r\n\r\n    return dataList[Math.round(n / 100 * percentile)];\r\n  }\r\n\r\n  // Passed to StatDisplay as 'value' prop\r\n  getAverageStat = (stat, fixed=true) => {\r\n\r\n    let character = this.props.character;\r\n    let classChanges = this.formatClassChanges();\r\n\r\n    // Unlike other stats, movement is fixed\r\n    if (stat === 'mv') {\r\n      return classes[classChanges[classChanges.length - 2]['class']]['bases']['mv'];\r\n    }\r\n    \r\n    // Start with the character base stat\r\n    let val = this.props.characterBaseStats[stat];\r\n\r\n    // Loop through all class intervals. The last index is a final level placeholder.\r\n    for (let i = 0; i < classChanges.length - 1; i++) {\r\n\r\n      // Increase val to class base stat (if applicable).\r\n      val = Math.max(val, classes[classChanges[i]['class']]['bases'][stat]);\r\n\r\n      // Get growth modifier from character and class growth rate.\r\n      let characterGrowth = character['growths'][stat];\r\n      let classGrowth = classes[classChanges[i]['class']]['growths'][stat];\r\n      let growthModifier = 0.01 * (characterGrowth + classGrowth);\r\n\r\n      // Get level difference.\r\n      let levelA = classChanges[i]['level'];\r\n      let levelB = classChanges[i + 1]['level'];\r\n      let levelDifference = levelB - levelA; \r\n      \r\n      // Add average stat growth over class interval.\r\n      if (fixed) {\r\n        val += growthModifier * levelDifference;\r\n      }\r\n      else {\r\n        for (let i = 0; i < levelDifference; i++) {\r\n          val += (Math.random() < growthModifier) ? 1 : 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add class bonuses.\r\n    val += classes[classChanges[classChanges.length - 2]['class']]['boosts'][stat];\r\n\r\n    // Round to two decimals.\r\n    return Math.round(val * 100) / 100;\r\n  }\r\n\r\n  setFinalLevel = (e, { name, value }) => {\r\n\r\n    this.setState({\r\n      finalLevel: value\r\n    });\r\n  }\r\n\r\n  setPercentile = (newPercentile) => {\r\n\r\n    this.setState({\r\n      percentile: newPercentile\r\n    });\r\n  }\r\n\r\n  setPercentileIterations = (newPercentileIterations) => {\r\n\r\n    this.setState({\r\n      percentileIterations: newPercentileIterations\r\n    });\r\n  }\r\n\r\n  renderStatDisplays = () => {\r\n    \r\n    // Outer array = columns, inner arrays = rows.\r\n    let grid = [\r\n      [ 'hp', 'str', 'mag', 'dex', 'spd' ],\r\n      [ 'mv', 'lck', 'def', 'res', 'cha' ]\r\n    ];\r\n\r\n    // Render StatDisplay objects enclosed by Grid.Column objects.\r\n    return grid.map((col, i) => {\r\n      return (\r\n        <Grid.Column key={i}>\r\n          {col.map((cell) => {\r\n\r\n            if (this.state.percentile === 50) {\r\n              return <StatDisplay key={cell} label={cell} value={this.getAverageStat(cell)} />\r\n            }\r\n            return <StatDisplay key={cell} label={cell} value={this.getMonteCarloAverageStat(cell, this.state.percentileIterations, this.state.percentile)} />\r\n          })}\r\n        </Grid.Column>\r\n      );\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.onReset();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevStates) {\r\n\r\n    if (prevProps.resetFlag !== this.props.resetFlag) {\r\n      this.onReset();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let characterId = this.props.characterId;\r\n    let characterName = this.props.character['name'];\r\n\r\n    return (\r\n      <WindowWrapper\r\n        characterId={characterId}\r\n        characterName={characterName}\r\n        headerButtons={\r\n          <Button color='blue' icon onClick={this.props.openCharacterSelectFunc}>\r\n            <Icon name='exchange' />\r\n          </Button>\r\n        }\r\n        body={\r\n\r\n          <div>\r\n\r\n            <Segment>\r\n              <Label attached='top left' color='yellow'>Information</Label>\r\n              <Input type='number' onChange={this.setFinalLevel} fluid defaultValue={1} labelPosition='left'>\r\n                <Label color='blue'>Level</Label>\r\n                <input ref={this.levelInputRef} />\r\n              </Input>\r\n              <Divider />\r\n              <Button icon labelPosition='left' color='blue' fluid onClick={this.props.openBaseStatsFunc} style={{marginBottom: '1em'}}> {/* Passed from App */}\r\n                <Icon name='edit' />\r\n                Joining Information\r\n              </Button>\r\n              <Button icon labelPosition='left' color='blue' fluid onClick={this.props.openClassChangeFunc}> {/* Passed from App */}\r\n                <Icon name='edit' />\r\n                Class Changes\r\n              </Button>\r\n            </Segment>\r\n\r\n            <Segment>\r\n              <Label attached='top left' color='yellow'>Expected Stats</Label>\r\n              <div className='stat-grid-wrapper'>\r\n                <Grid columns={2}>{this.renderStatDisplays()}</Grid>\r\n              </div>\r\n              <Divider />\r\n              <PercentileInput\r\n                setPercentileFunc={this.setPercentile}\r\n                setPercentileIterationsFunc={this.setPercentileIterations}\r\n              />\r\n            </Segment>\r\n\r\n          </div>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass StatDisplay extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Input className='stat-display' labelPosition='left' fluid>\r\n        <Label color='pink'>{this.props.label}</Label>\r\n        <input value={this.props.value} className='no-select' readOnly />\r\n      </Input>\r\n    );\r\n  }\r\n}\r\n\r\nclass PercentileInput extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n      values: [ 50 ]\r\n    };\r\n  }\r\n\r\n  setPercentileIterations = (e, { name, value }) => {\r\n\r\n    this.props.setPercentileIterationsFunc(value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevStates) {\r\n\r\n    if (prevStates.values[0] !== this.state.values[0]) {\r\n      this.props.setPercentileFunc(this.state.values[0]);\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <div className='percentile-slider'>\r\n\r\n        <div>\r\n          <Range\r\n            step={25} min={25} max={75}\r\n            values={this.state.values}\r\n            onChange={values => this.setState({ values })}\r\n            renderTrack={({ props, children }) => (\r\n              <div {...props} style={{...props.style}}>{children}</div>\r\n            )}\r\n            renderThumb={({ props }) => (\r\n              <div {...props} style={{...props.style}}/>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            {this.state.values[0]}th percentile\r\n          </div>\r\n          <div style={{color: 'rgba(0, 0, 0, 0.68)', marginBottom: '1em'}}>\r\n            {(this.state.values[0] === 50) ? 'exact' : 'approximation'}\r\n          </div>\r\n          <div>\r\n            Iterations for approximation:\r\n            <Input type='number' style={{width: '5em', marginLeft: '1em'}} defaultValue={100} onChange={this.setPercentileIterations} />\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","\r\nimport React from 'react';\r\nimport { Segment, Input, Dropdown, Button, Icon, Label } from 'semantic-ui-react';\r\n\r\nimport * as crypto from 'crypto';\r\n\r\nimport './css/classChangeInput.css';\r\n\r\nimport classes from './data/classes.json';\r\n\r\nclass ClassChangeInput extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n      classChanges: {},\r\n      classOptions: [],\r\n      classChangeFieldList: []\r\n    };\r\n  }\r\n\r\n  getValues = () => {\r\n\r\n    let classChanges = this.state.classChanges;\r\n    let ret = [];\r\n\r\n    for (var key in classChanges) {\r\n\r\n      if (!classChanges.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      if (classChanges[key]['class'] === null || classChanges[key]['level'] === null) {\r\n        continue;\r\n      }\r\n\r\n      ret.push(classChanges[key]);\r\n    }\r\n\r\n    // Sort values ascending.\r\n    return ret.sort((a, b) => {\r\n      return a['level'] - b['level']\r\n    });\r\n  }\r\n\r\n  setClassOptions = () => {\r\n\r\n    let tempOptions = [\r\n      { key: 'null', value: null, text: 'No Class Change' }  // Add 'No Class Change' option at the start of the list.\r\n    ];\r\n\r\n    for (var key in classes) {\r\n\r\n      if (!classes.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      tempOptions.push({\r\n        key: key,\r\n        value: key,\r\n        text: classes[key]['name']\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      classOptions: tempOptions\r\n    });\r\n  }\r\n\r\n  modifyAttr = (id, attr, newVal) => {\r\n\r\n    let tempClassChanges = this.state.classChanges;\r\n\r\n    let defaultClass = tempClassChanges[id]['class'];\r\n    let defaultLevel = tempClassChanges[id]['level'];\r\n\r\n    tempClassChanges[id] = {\r\n      level: (attr === 'level') ? newVal : defaultLevel,\r\n      class: (attr === 'class') ? newVal : defaultClass\r\n    }\r\n\r\n    this.setState({\r\n      classChanges: tempClassChanges\r\n    });\r\n  }\r\n\r\n  deleteClassChangeInputField = (id) => {\r\n\r\n    let tempClassChanges = this.state.classChanges;\r\n    delete tempClassChanges[id];\r\n\r\n    let tempClassChangeFieldList = this.state.classChangeFieldList.slice();\r\n    for (let i = 0; i < tempClassChangeFieldList.length; i++) {\r\n      if (tempClassChangeFieldList[i].id === id) {\r\n        tempClassChangeFieldList.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      classChanges: tempClassChanges,\r\n      classChangeFieldList: tempClassChangeFieldList\r\n    });\r\n  }\r\n\r\n  addClassChangeInputField = () => {\r\n\r\n    let id = crypto.createHash('sha256').update('class-change-' + Date.now()).digest('hex');\r\n\r\n    let tempClassChangeFieldList = this.state.classChangeFieldList.slice();\r\n    tempClassChangeFieldList.push({\r\n      id: id\r\n    });\r\n\r\n    let tempClassChanges = this.state.classChanges;\r\n    tempClassChanges[id] = {\r\n      class: null,\r\n      level: null\r\n    };\r\n\r\n    this.setState({\r\n      classChanges: tempClassChanges,\r\n      classChangeFieldList: tempClassChangeFieldList\r\n    });\r\n  }\r\n\r\n  renderClassChangeFields = () => {\r\n\r\n    return this.state.classChangeFieldList.map((val) => {\r\n      return (\r\n        <ClassChangeField key={val.id} identifier={val.id}\r\n          options={this.state.classOptions}\r\n          modifyFunc={this.modifyAttr}\r\n          deleteFunc={this.deleteClassChangeInputField}\r\n        />\r\n      )\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.setClassOptions();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Segment>\r\n        <Label attached='top left' color='yellow'>Class Changes</Label>\r\n\r\n        {this.renderClassChangeFields()}\r\n\r\n        <Button icon fluid color='blue' onClick={this.addClassChangeInputField}>\r\n          <Icon name='add' />\r\n        </Button>\r\n\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nclass ClassChangeField extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.fixedWidthRef = React.createRef();\r\n\r\n    this.state = {\r\n      fixedRefWidth: 0\r\n    };\r\n  }\r\n\r\n  changeClass = (e, { name, value }) => {\r\n\r\n    this.props.modifyFunc(this.props.identifier, 'class', value);\r\n  }\r\n\r\n  changeLevel = (e, { name, value }) => {\r\n\r\n    this.props.modifyFunc(this.props.identifier, 'level', parseInt(value));\r\n  }\r\n\r\n  delete = () => {\r\n\r\n    this.props.deleteFunc(this.props.identifier);\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.setState({\r\n      fixedRefWidth: this.fixedWidthRef.current.clientWidth\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='class-change-input-field'>\r\n        <div>\r\n          <Dropdown placeholder='No Class Change' search selection options={this.props.options} fluid onChange={this.changeClass} />\r\n        </div>\r\n        <div>\r\n          <div ref={this.fixedWidthRef} style={{flexBasis: this.state.fixedRefWidth}}>\r\n            <span>at lvl</span>\r\n            <Input type='number' placeholder='lvl' style={{width: '3.5em'}} onChange={this.changeLevel} />\r\n            <Button icon color='blue' style={{margin: 0, marginLeft: '1em'}} onClick={this.delete}>\r\n              <Icon name='close' />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClassChangeInput;\r\n","import React from 'react';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\n\r\nimport WindowWrapper from './WindowWrapper';\r\nimport ClassChangeInput from './ClassChangeInput';\r\n\r\nclass ClassChange extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    \r\n    this.classChangeRef = React.createRef();\r\n  }\r\n\r\n  onApply = () => {\r\n    \r\n    let values = this.classChangeRef.current.getValues();\r\n    this.props.appliedFunc(values);  // Passed from App.\r\n  }\r\n\r\n  render() {\r\n\r\n    let characterId = this.props.characterId;\r\n    let character = this.props.character;\r\n    let characterName = this.props.character['name'];\r\n\r\n    return (\r\n      <WindowWrapper\r\n        characterId={characterId}\r\n        characterName={characterName}\r\n        headerButtons={\r\n          <Button icon color='blue' onClick={this.onApply}>\r\n            <Icon name='check' />\r\n          </Button>\r\n        }\r\n        body={\r\n          <ClassChangeInput ref={this.classChangeRef} character={character} resetFlag={this.props.resetFlag} />\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClassChange;\r\n","import React from 'react';\r\nimport { Button, Icon, Input, Label, Segment, Grid, Divider, Checkbox } from 'semantic-ui-react';\r\n\r\nimport WindowWrapper from './WindowWrapper';\r\n\r\nimport './css/statGrid.css';\r\n\r\nimport classes from './data/classes.json';\r\n\r\nclass BaseStats extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.levelInputRef = React.createRef();\r\n\r\n    this.state = {\r\n      baseLevel: 1,\r\n      baseStats: { 'hp': 0, 'str': 0, 'mag': 0, 'dex': 0, 'spd': 0, 'lck': 0, 'def': 0, 'res': 0, 'cha': 0 },\r\n      includeStatBoosts: false\r\n    };\r\n  }\r\n\r\n  onReset = () => {\r\n\r\n    // Reset joining level.\r\n    this.levelInputRef.current.value = 1;\r\n    this.setState({\r\n      baseLevel: 1\r\n    });\r\n\r\n    this.setStatsToAverage();\r\n  }\r\n\r\n  onApply = (close=true) => {\r\n\r\n    let baseClass = classes[this.props.character['class']];\r\n    let baseStats = this.state.baseStats;\r\n    let modifiedBaseStats = {};\r\n\r\n    for (var stat in baseStats) {\r\n\r\n      if (!baseStats.hasOwnProperty(stat)) {\r\n        continue;\r\n      }\r\n\r\n      modifiedBaseStats[stat] = baseStats[stat];\r\n      // Remove class bonuses from base stats (if applicable).\r\n      if (this.state.includeStatBoosts) {\r\n        modifiedBaseStats[stat] -= baseClass['boosts'][stat];\r\n      }\r\n    }\r\n    \r\n    this.props.appliedFunc(this.state.baseLevel, modifiedBaseStats, close);  // Passed from App.\r\n  }\r\n\r\n  setStatsToAverage = () => {\r\n    \r\n    let statList = [ 'hp', 'str', 'mag', 'dex', 'spd', 'lck', 'def', 'res', 'cha' ];\r\n    let tempBaseStats = {};\r\n\r\n    statList.forEach((stat) => {\r\n      tempBaseStats[stat] = this.getAverageBaseStat(stat);\r\n    });\r\n\r\n    this.setState({\r\n      baseStats: tempBaseStats\r\n    });\r\n  }\r\n\r\n  getAverageBaseStat(stat) {\r\n\r\n    let character = this.props.character;\r\n    let baseClass = classes[character['class']];\r\n\r\n    let growthModifier = 0.01 * (character['growths'][stat] + baseClass['growths'][stat]);\r\n\r\n    let val = character['bases'][stat] + growthModifier * (this.state.baseLevel - 1);\r\n    val = Math.max(val, baseClass['bases'][stat]);\r\n    if (this.state.includeStatBoosts) {\r\n      val += baseClass['boosts'][stat];\r\n    }\r\n\r\n    return Math.round(val);\r\n  }\r\n\r\n  setBaseLevel = (e, { name, value }) => {\r\n\r\n    this.setState({\r\n      baseLevel: value\r\n    });\r\n  }\r\n\r\n  setIncludeStatBoosts = (e, { checked }) => {\r\n\r\n    this.setState({\r\n      includeStatBoosts: checked\r\n    });\r\n  }\r\n\r\n  setBaseStatValue = (stat, val) => {\r\n\r\n    let tempBaseStats = this.state.baseStats;\r\n\r\n    tempBaseStats[stat] = val;\r\n\r\n    this.setState({\r\n      baseStats: tempBaseStats\r\n    });\r\n  }\r\n\r\n  renderStatDisplays = () => {\r\n    \r\n    // Outer array = columns, inner arrays = rows.\r\n    let grid = [\r\n      [ 'hp', 'str', 'mag', 'dex', 'spd' ],\r\n      [ 'lck', 'def', 'res', 'cha' ]\r\n    ];\r\n\r\n    // Render StatDisplay objects enclosed by Grid.Column objects.\r\n    return grid.map((col, i) => {\r\n      return (\r\n        <Grid.Column key={i}>\r\n          {col.map((cell) => {\r\n            return <StatDisplay key={cell} label={cell} defaultValue={this.state.baseStats[cell]}\r\n              setBaseStatValueFunc={this.setBaseStatValue}\r\n            />\r\n          })}\r\n        </Grid.Column>\r\n      );\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.onReset();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevStates) {\r\n\r\n    if (prevProps.resetFlag !== this.props.resetFlag) {\r\n      this.onReset();\r\n    }\r\n\r\n    if (prevStates.baseLevel !== this.state.baseLevel) {\r\n      this.setStatsToAverage();\r\n    }\r\n\r\n    if (prevStates.baseStats !== this.state.baseStats) {\r\n      this.onApply(false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let characterId = this.props.characterId;\r\n    let characterName = this.props.character['name'];\r\n\r\n    let includeStatBoostsLabel = [\r\n      [<div key='title'>{'Include class bonuses in base stats'}</div>],\r\n      [<div key='subtitle' style={{color: 'rgba(0, 0, 0, 0.68)'}}>{'Assumes unit\\'s default lvl 1 class'}</div>]  // Same colour as card description.\r\n    ];\r\n\r\n    return (\r\n      <WindowWrapper\r\n        characterId={characterId}\r\n        characterName={characterName}\r\n        headerButtons={\r\n          <Button icon color='blue' onClick={this.onApply}>\r\n            <Icon name='check' />\r\n          </Button>\r\n        }\r\n        body={\r\n          <div>\r\n\r\n            <Segment>\r\n              <Label attached='top left' color='yellow'>Joining Information</Label>\r\n              <Input type='number' onChange={this.setBaseLevel} fluid defaultValue={1} labelPosition='left'>\r\n                <Label color='blue'>Level</Label>\r\n                <input ref={this.levelInputRef} />\r\n              </Input>\r\n              <Divider />\r\n              <div className='stat-grid-wrapper'>\r\n                <Grid columns={2}>{this.renderStatDisplays()}</Grid>\r\n              </div>\r\n              <Divider />\r\n              <Checkbox toggle label={includeStatBoostsLabel} onChange={this.setIncludeStatBoosts} />\r\n            </Segment>\r\n\r\n          </div>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass StatDisplay extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.inputRef = React.createRef();\r\n\r\n    this.state = {\r\n      defaultValue: this.props.defaultValue  // A change in defaultValue will override the current value.\r\n    };\r\n  }\r\n\r\n  setValue = (e, { name, value }) => {\r\n\r\n    this.inputRef.current.value = value;\r\n    this.props.setBaseStatValueFunc(this.props.label, value);\r\n  }\r\n\r\n  resetValue = () => {\r\n\r\n    this.inputRef.current.value = this.props.defaultValue;\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.resetValue();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevStates) {\r\n\r\n    if (prevProps.defaultValue !== this.props.defaultValue) {\r\n      this.resetValue();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Input type='number' className='stat-display' onChange={this.setValue} labelPosition='left' fluid>\r\n        <Label color='blue'>{this.props.label}</Label>\r\n        <input ref={this.inputRef} />\r\n      </Input>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BaseStats;\r\n","\r\nimport React from 'react';\r\nimport { Card, Image, Grid } from 'semantic-ui-react';\r\n\r\nimport './css/characterSelect.css';\r\n\r\nimport characters from './data/characters.json';\r\nimport classes from './data/classes.json';\r\n\r\nclass CharacterSelect extends React.Component {\r\n\r\n  renderCharacterItems = () => {\r\n\r\n    let grid = [ [], [] ]; // Outer array = columns, inner arrays = rows.\r\n\r\n    let indexCounter = 0;  // Counts index when looping through characters\r\n\r\n    for (var name in characters) {\r\n\r\n      if (!characters.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n\r\n      // Cycle through rows to display left to right then up to down.\r\n      grid[indexCounter % 2].push(\r\n        <CharacterItem key={name} name={name} appliedFunc={this.props.appliedFunc} />\r\n      );\r\n\r\n      indexCounter++;\r\n    }\r\n\r\n    // Render CharacterItem objects enclosed by Grid.Column objects.\r\n    // Grid.Row is not used because all CharacterItem objects have the same height, thus eliminating the use of vertical alignment.\r\n    return grid.map((col, i) => {\r\n      return (\r\n        <Grid.Column key={i}>{col}</Grid.Column>\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='character-select-grid-wrapper'>\r\n        <Grid columns={2}>{this.renderCharacterItems()}</Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CharacterItem extends React.Component {\r\n\r\n  onApply = () => {\r\n\r\n    this.props.appliedFunc(this.props.name);  // Passed from App.\r\n  }\r\n\r\n  render() {\r\n\r\n    let character = characters[this.props.name];\r\n    let className = classes[character['class']]['name'];\r\n\r\n    return (\r\n      <Card className='character-item' onClick={this.onApply}>\r\n        <Image src={'images/characters/' + this.props.name + '.png'} wrapped ui={false} />\r\n        <Card.Content>\r\n          <Card.Header>{character['name']}</Card.Header>\r\n          <Card.Description>{className}</Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterSelect;\r\n","\r\nimport React from 'react';\r\nimport { Sidebar } from 'semantic-ui-react';\r\n\r\nimport Main from './Main';\r\nimport ClassChange from './ClassChange';\r\nimport BaseStats from './BaseStats';\r\nimport CharacterSelect from './CharacterSelect';\r\n\r\nimport './css/app.css';\r\n\r\nimport characters from './data/characters.json';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    \r\n    super(props);\r\n    \r\n    this.state = {\r\n      resetFlag: 0,  // Passed to children as props. Signals a reset.\r\n      classChangeOpen: false,\r\n      baseStatsOpen: false,\r\n      characterSelectOpen: false,\r\n\r\n      characterId: 'byleth',\r\n      characterBaseLevel: 1,\r\n      characterBaseStats: { 'hp': 0, 'str': 0, 'mag': 0, 'dex': 0, 'spd': 0, 'lck': 0, 'def': 0, 'res': 0, 'cha': 0 },\r\n      classChanges: []\r\n    };\r\n  }\r\n\r\n  reset = () => {\r\n\r\n    this.setState((state) => ({\r\n      resetFlag: state.resetFlag + 1\r\n    }));\r\n  }\r\n\r\n  // Passed to Main for 'Edit Class Changes' button.\r\n  openClassChange = () => {\r\n\r\n    this.setState({\r\n      classChangeOpen: true\r\n    });\r\n  }\r\n\r\n  // Passed to Main for 'Edit Joining Stats' button.\r\n  openBaseStats = () => {\r\n\r\n    this.setState({\r\n      baseStatsOpen: true\r\n    });\r\n  }\r\n\r\n  // Passed to CharacterSelect for 'Select Character' button.\r\n  openCharacterSelect = () => {\r\n\r\n    this.setState({\r\n      characterSelectOpen: true\r\n    });\r\n  }\r\n\r\n  // Passed to ClassChange for the 'Apply' button.\r\n  applyClassChanges = (newClassChanges, close=true) => {\r\n\r\n    this.setState((state) => ({\r\n      classChanges: newClassChanges,\r\n      classChangeOpen: close ? false : state.classChangeOpen\r\n    }));\r\n  }\r\n\r\n  // Passed to BaseStats for the 'Apply' button.\r\n  applyBaseStats = (newBaseLevel, newBaseStats, close=true) => {\r\n\r\n    this.setState((state) => ({\r\n      characterBaseLevel: newBaseLevel,\r\n      characterBaseStats: newBaseStats,\r\n      baseStatsOpen: close ? false : state.baseStatsOpen\r\n    }));\r\n  }\r\n\r\n  // Passed to CharacterSelect as an on modify callback.\r\n  applyCharacterSelect = (newCharacterId, close=true) => {\r\n\r\n    this.reset();\r\n\r\n    this.setState((state) => ({\r\n      characterId: newCharacterId,\r\n      characterSelectOpen: close ? false : state.characterSelectOpen\r\n    }));\r\n  }\r\n\r\n  sideBarOpen = () => {\r\n\r\n    return this.state.classChangeOpen || this.state.baseStatsOpen || this.state.characterSelectOpen;\r\n  }\r\n\r\n  render() {\r\n    \r\n    let characterId = this.state.characterId;\r\n    let character = characters[characterId];\r\n\r\n    return (\r\n      <Sidebar.Pushable as='div'>\r\n        <Sidebar className='side-bar' animation='overlay' visible={this.state.classChangeOpen} style={{backgroundColor: '#f5f5f5'}}>\r\n          <ClassChange\r\n            characterId={characterId}\r\n            character={character}\r\n            resetFlag={this.state.resetFlag}\r\n            appliedFunc={this.applyClassChanges}\r\n          />\r\n        </Sidebar>\r\n\r\n        <Sidebar className='side-bar' animation='overlay' visible={this.state.baseStatsOpen} style={{backgroundColor: '#f5f5f5'}}>\r\n          <BaseStats\r\n            characterId={characterId}\r\n            character={character}\r\n            resetFlag={this.state.resetFlag}\r\n            appliedFunc={this.applyBaseStats}\r\n          />\r\n        </Sidebar>\r\n\r\n        <Sidebar className='side-bar' animation='overlay' visible={this.state.characterSelectOpen} style={{backgroundColor: '#ffffff'}}>\r\n          <CharacterSelect\r\n            appliedFunc={this.applyCharacterSelect}\r\n          />\r\n        </Sidebar>\r\n\r\n        <Sidebar.Pusher as='div' className='main-container' style={{overflow: (this.sideBarOpen() ? 'hidden' : 'auto')}}>\r\n          <Main\r\n            characterId={characterId}\r\n            character={character}\r\n            characterBaseLevel={this.state.characterBaseLevel}\r\n            characterBaseStats={this.state.characterBaseStats}\r\n            classChanges={this.state.classChanges}\r\n            resetFlag={this.state.resetFlag}\r\n            openCharacterSelectFunc={this.openCharacterSelect}\r\n            openClassChangeFunc={this.openClassChange}\r\n            openBaseStatsFunc={this.openBaseStats}\r\n          />\r\n        </Sidebar.Pusher>\r\n      </Sidebar.Pushable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}